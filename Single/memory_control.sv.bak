/*
  Eric Villasenor
  evillase@gmail.com

  this block is the coherence protocol
  and artibtration for ram
*/

// interface include
`include "cache_control_if.vh"

// memory types
`include "cpu_types_pkg.vh"

module memory_control (
  input CLK, nRST,
  cache_control_if.cc ccif
);
  // type import
  import cpu_types_pkg::*;

  // number of cpus for cc
  parameter CPUS = 2;

  logic [1:0] priority; //11, and 10, data first, 01, instr 00 off
  logic dread, dwrite;
  
  assign ccif.dload[0]=ccif.ramload;
  assign ccif.iload[0]=ccif.ramload;
  assign ccif.ramstore=ccif.dstore[0];
  
  assign priority[0] = ccif.dREN[0]||ccif.dWEN[0];
  assign priority[1] = ccif.iREN[0];
  
always_comb begin
  ccif.ramaddr=0;
  ccif.iwait[0]=0;
  ccif.dwait[0]=0;
  //priotiry='0;
  
if(ccif.iREN[0] && ~ccif.dWEN[0]) begin
    ccif.ramREN=1;
  end
  else if (ccif.dREN[0]) begin
    ccif.ramREN=1;  
  end
 else begin
   ccif.ramREN=0;
 end

if(priority[1]) begin
  ccif.ramaddr = ccif.daddr[0];
  ccif.dwait[0]=
  end
else if(~priority[1]&&priority[0]) begin
  ccif.ramaddr=ccif.iaddr[0];
  ccif.iwait[0]=
  end
endmodule
